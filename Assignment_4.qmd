---
title: "Assignment 4"
format: html
editor: visual
---

## Part 2

### Question 1

```{r, warning=FALSE, message=FALSE}
# Libraries
library(tidyverse)
library(repurrrsive)
library(jsonlite)
library(httr)
library(rvest)
library(xml2)
library(gt)
```

```{r}
data1 <- fromJSON("https://www.reddit.com/r/torontomapleleafs/comments/1kusd5v/does_florida_beating_the_absolute_wheels_off.json", flatten = T)

df1 <- data1$data.children[[1]]

tib <- df1 |>
  select(
    subreddit = data.subreddit,
    permalink = data.permalink,
    author = data.author,
    title = data.title,
    "created_utc (timestamp)" = data.created_utc,
    num_comments = data.num_comments,
    "ups (upvotes)" = data.ups,
    "downs (downvotes)" = data.downs)

gt(tib) |>
   fmt_markdown(columns = permalink) |>
  tab_style(
    style = list(
      css("white-space"= "normal"),
      css("word-break" = "break-all")),
    locations = cells_body(columns = permalink))
 
```

### Question 2

#### Using html_table:

I began by using html_elements() and using "table" as my selector. This returned all 40 tables on Connor Bedard's Overview Hockey Reference Page.

```{r}
html1 <- read_html("https://www.hockey-reference.com/players/b/bedarco01.html")

all_tables <- html1 |>
  html_elements("table") |>
  html_table()

#This is the table I want
all_tables[[5]]
```

Next, I used inspect element on Chrome, and directly looked at the HTML code for the Extra Stats Table I wanted to use. I noted that when I went through the HTML code and it went over the table I wanted, it said "table#skaters_play_by_play_all". Putting that into html_elements, I got:

```{r}
html1 |>
  html_elements("table#skaters_play_by_play_all") |>
  html_table()
```

#### Using CSS Selectors:

```{r, warning = F, message = F}
# Getting all the table data
table <- html1 |> html_elements("table#skaters_play_by_play_all")

#Extracting the header, row, foot, season, and footer names as individual values
header <- table |> html_elements("thead tr th") |> html_text2()
rows <- table |> html_elements("tbody tr td") |> html_text2()
footer <- table |> html_elements("tfoot tr td") |> html_text2()
seasons <- table |> html_elements("tbody tr th") |> html_text2()
footer_headers <- table |> html_elements("tfoot tr th") |> html_text2()

# Making my initial table with just the body and footer values
table_data <- matrix(c(rows, footer), ncol = 19, nrow = 4, byrow = T)

# Combining the seasons and footer names to make the first column
first_col <- c(seasons, footer_headers)

# Combining my first column and table to get the entire "body" of the table
table_data <- cbind(first_col, table_data)

# Turning the table into a tibble and turning characters into numeric values (if applicable)
extra_stats <- as_tibble(table_data) |>
  mutate(across(everything(), ~ na_if(.x, ""))) |>
  mutate(across(where(~ all(is.na(.) | str_detect(., "^\\d+$"))), as.numeric))

#Adding headers
colnames(extra_stats) <- header
  
extra_stats
```

### Question 3

as_tibble(dbGetQuery(con, "SELECT MAX(G) FROM extra_stats WHERE Team = CHI"))

```{r, warning = F, message = F}
library(duckdb)
con <- DBI::dbConnect(duckdb())

dbWriteTable(con, "extra_stats", extra_stats)

# Finds the maximum number of goals Connor Bedard has had in a season

dbGetQuery(con, "SELECT MAX(G) FROM extra_stats WHERE Team = 'CHI'")
```
